###### Part 1 ######
----> Let's create a React application called part1, navigate to its directory and install the libraries:
# npm 7+, extra double-dash is needed:
npm create vite@latest part1 -- --template react
cd part1
npm install

----> The application is started as follows:
npm run dev

###### Part 2 ######
----> From the root directory of your app, we can run the json-server using the command npx:
npx json-server --port 3001 --watch db.json
# Let's navigate to the address http://localhost:3001/notes in the browser. We can see that json-server serves the notes we previously wrote to the file in JSON format.
# Ctrl + C to stop.

----> Assuming the api-key is 54l41n3n4v41m34rv0, when the application is started like so:
export VITE_SOME_KEY=54l41n3n4v41m34rv0 && npm run dev // For Linux/macOS Bash
($env:VITE_SOME_KEY="54l41n3n4v41m34rv0") -and (npm run dev) // For Windows PowerShell
set "VITE_SOME_KEY=54l41n3n4v41m34rv0" && npm run dev // For Windows cmd.exe
You can access the value of the key from the import.meta.env object:
const api_key = import.meta.env.VITE_SOME_KEY
// variable api_key now has the value set in startup

###### Part 3 ######
----> Create a new template for our NodeJS application:
npm init
npm install express
----> We can run the program directly with Node from the command line:
node index.js
# Or we can run it as an npm script:
npm start
----> We can start our application with nodemon like this:
npm install --save-dev nodemon
node_modules/.bin/nodemon index.js
# We can now start the server in development mode with the command:
npm run dev
----> Other dependencies:
npm install cors #Middleware
npm install mongoose
npm install dotenv
npm install eslint --save-dev
npx eslint --fix .

###### Part 4 ######
----> In this course we will be using a testing library developed and used internally by Facebook called jest, 
      which resembles the previous king of JavaScript testing libraries Mocha.
npm install --save-dev jest
npm run test
npm test -- -t testName'
----> Other dependencies:
# Lodash makes JavaScript easier by taking the hassle out of working with arrays, numbers, objects, strings, etc.
npm install lodash
# We can then achieve cross-platform compatibility by using the cross-env library
npm install cross-env
----> Supertest:
npm install --save-dev supertest
# Running tests one by one
npm test -- tests/note_api.test.js
# The -t option can be used for running tests with a specific name
npm test -- -t "a specific note is within the returned notes"
npm test -- -t 'notes'
# express-async-errors to remove try-catch
npm install express-async-errors
----> User administration
npm install bcrypt
npm install mongoose-unique-validator
----> Token authentication
npm install jsonwebtoken